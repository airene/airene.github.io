import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.e4a1f2a7.js";const m=JSON.parse('{"title":"路径总和问题 - 是否存在满足条件的路径","description":"二叉树相关的算法","frontmatter":{"date":"2017-08-07T00:00:00.000Z","title":"路径总和问题 - 是否存在满足条件的路径","tags":["算法"],"description":"二叉树相关的算法"},"headers":[],"relativePath":"posts/al_path_sum.md","filePath":"posts/al_path_sum.md"}'),l={name:"posts/al_path_sum.md"},p=o(`<h1 id="路径总和问题-是否存在满足条件的路径" tabindex="-1">路径总和问题 - 是否存在满足条件的路径 <a class="header-anchor" href="#路径总和问题-是否存在满足条件的路径" aria-label="Permalink to &quot;路径总和问题 - 是否存在满足条件的路径&quot;">​</a></h1><h2 id="给定一个二叉树-求证是否有路径满足总和等于给定的值" tabindex="-1">给定一个二叉树，求证是否有路径满足总和等于给定的值 <a class="header-anchor" href="#给定一个二叉树-求证是否有路径满足总和等于给定的值" aria-label="Permalink to &quot;给定一个二叉树，求证是否有路径满足总和等于给定的值&quot;">​</a></h2><p><strong>用递归是真的方便啊</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasSumPath</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">root</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sum</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (root.left </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> root.right </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> sum</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasSumPath</span><span style="color:#E1E4E8;">(root.left, sum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> root.val) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasSumPath</span><span style="color:#E1E4E8;">(root.right, sum </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> root.val)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasSumPath</span><span style="color:#24292E;">(</span><span style="color:#E36209;">root</span><span style="color:#24292E;">, </span><span style="color:#E36209;">sum</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (root.left </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> root.right </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> sum</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasSumPath</span><span style="color:#24292E;">(root.left, sum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> root.val) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasSumPath</span><span style="color:#24292E;">(root.right, sum </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> root.val)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="找出路径-fixme" tabindex="-1">找出路径 FIXME <a class="header-anchor" href="#找出路径-fixme" aria-label="Permalink to &quot;找出路径 FIXME&quot;">​</a></h2>`,5),t=[p];function e(r,c,E,y,i,h){return a(),n("div",null,t)}const d=s(l,[["render",e]]);export{m as __pageData,d as default};
