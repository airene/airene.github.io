import{_ as a,c as i,ag as n,o as e}from"./chunks/framework.B9jWP86L.js";const o=JSON.parse('{"title":"macOS 自签一个825天有效期的SSL证书并实现macOS,iOS,windows都能安装","description":"unraid内网域名加一个有效期10年的ssl证书，没有证书理论上更快，但是总是有不安全的提示，好多网上的教程都没有实操性了，找到一个好用的总结发出来","frontmatter":{"date":"2024-06-27T00:00:00.000Z","title":"macOS 自签一个825天有效期的SSL证书并实现macOS,iOS,windows都能安装","category":"macOS","tags":["macOS","unraid"],"description":"unraid内网域名加一个有效期10年的ssl证书，没有证书理论上更快，但是总是有不安全的提示，好多网上的教程都没有实操性了，找到一个好用的总结发出来"},"headers":[],"relativePath":"posts/self-signed-ssl.md","filePath":"posts/self-signed-ssl.md"}'),t={name:"posts/self-signed-ssl.md"};function p(l,s,h,k,r,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h1><h2 id="如何生成证书" tabindex="-1">如何生成证书 <a class="header-anchor" href="#如何生成证书" aria-label="Permalink to &quot;如何生成证书&quot;">​</a></h2><p>现在各大平台免费的ssl证书已经只有90天了，之前是1年。1年申请且部署一次还算不麻烦，90天就有点太频繁了。<br> 目前个人生产环境前面用 caddy 代替 nginx ，可以自动续ssl证书，或者 nginx+acme 服务。<br> 内网环境，比如 unraid 这样的服务，直接解析到局域网ip的类型（不需要其他人访问），完全可以自签一个10年的就不用动了，以下是步骤(在macOS14.5执行)：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 要点 输入一个密码并记住密码，后面要用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -des3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myCA.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 生成10年有效期的跟证书，几乎可以随便填， </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Common Name 也就是CN 我填的是域名 而且是一个二级域名 eg. nas.ti.bi，可能有更高级玩法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -nodes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myCA.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3650</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myCA.pem</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 站点密钥 也就是nginx 证书的key文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> genrsa</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ti.bi.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2048</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 签名文件 几乎可以随便填， Common Name 也就是CN 我填的是域名 而且是一个二级域名 eg. nas.ti.bi </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># A challenge password 直接回车</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -key</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ti.bi.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ti.bi.csr</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 先把下一段内容保存成 san.ext 文件备用， 825天目前发现是iOS证书不报非法证书的最长天数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x509</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -req</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ti.bi.csr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myCA.pem</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CAkey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myCA.key</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -CAcreateserial</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ti.bi.crt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -days</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 825</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -sha256</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -extfile</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> san.ext</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># san.ext</span></span>
<span class="line"><span></span></span>
<span class="line"><span>authorityKeyIdentifier=keyid,issuer</span></span>
<span class="line"><span>basicConstraints=CA:FALSE</span></span>
<span class="line"><span>keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment</span></span>
<span class="line"><span>subjectAltName = @alt_names</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[alt_names]</span></span>
<span class="line"><span>DNS.1 = nas.ti.bi</span></span></code></pre></div><h2 id="将证书导入到-macos-钥匙串" tabindex="-1">将证书导入到 macOS 钥匙串 <a class="header-anchor" href="#将证书导入到-macos-钥匙串" aria-label="Permalink to &quot;将证书导入到 macOS 钥匙串&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1.	打开 Finder，找到 myCA.pem 文件并双击它。这将打开“钥匙串访问”应用程序。</span></span>
<span class="line"><span>2.	在“钥匙串访问”中，选择左侧栏中的“系统”钥匙串。</span></span>
<span class="line"><span>3.	将证书拖动到“系统”钥匙串中，或者选择 文件 -&gt; 导入项目...，选择 myCA.pem 文件，然后选择“系统”钥匙串。</span></span>
<span class="line"><span>4.	输入管理员密码以进行确认。</span></span>
<span class="line"><span>5.	在“钥匙串访问”中找到刚刚导入的证书。</span></span>
<span class="line"><span>6.	双击证书打开证书信息窗口。</span></span>
<span class="line"><span>7.	在证书信息窗口中，展开 信任 部分，将 使用此证书时 设置为 始终信任。</span></span>
<span class="line"><span>8.	关闭证书信息窗口，并输入管理员密码以进行确认。</span></span></code></pre></div><h2 id="放到-nginx-的配置里即可-这个就略过了" tabindex="-1">放到 nginx 的配置里即可，这个就略过了 <a class="header-anchor" href="#放到-nginx-的配置里即可-这个就略过了" aria-label="Permalink to &quot;放到 nginx 的配置里即可，这个就略过了&quot;">​</a></h2><p><code>ti.bi.crt</code> 和<code>ti.bi.key</code> 就是nginx配置文件中需要配置的文件， unraid 需要两个文件合成一个文件，ti.bi.pem放上面，ti.bi.key放下面，命名为 {nas}_unraid_bundle.pem，放到<code>/boot/config/ssl/certs</code>即可。<br> {nas}为你的unraid实例名称。</p><h2 id="主要参考-比如怎么ios-windows安装根证书" tabindex="-1">主要参考 比如怎么iOS,windows安装根证书 <a class="header-anchor" href="#主要参考-比如怎么ios-windows安装根证书" aria-label="Permalink to &quot;主要参考 比如怎么iOS,windows安装根证书&quot;">​</a></h2><p><a href="https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/" target="_blank" rel="noreferrer">https://deliciousbrains.com/ssl-certificate-authority-for-local-https-development/</a></p>`,11)]))}const F=a(t,[["render",p]]);export{o as __pageData,F as default};
