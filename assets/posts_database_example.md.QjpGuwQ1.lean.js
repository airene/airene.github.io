import{_ as a,c as i,a2 as t,o as n}from"./chunks/framework.Bw1Jxgnw.js";const o=JSON.parse('{"title":"一个巧妙的数据结构设计的例子，bitmap的使用","description":"一个并不常见，但是非常考察基础知识的综合应用","frontmatter":{"date":"2024-08-07T00:00:00.000Z","title":"一个巧妙的数据结构设计的例子，bitmap的使用","category":"database","tags":["database","bitmap"],"description":"一个并不常见，但是非常考察基础知识的综合应用"},"headers":[],"relativePath":"posts/database_example.md","filePath":"posts/database_example.md"}'),l={name:"posts/database_example.md"};function e(h,s,p,k,r,d){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="一个巧妙的数据结构设计的例子-bitmap的使用" tabindex="-1">一个巧妙的数据结构设计的例子，bitmap的使用 <a class="header-anchor" href="#一个巧妙的数据结构设计的例子-bitmap的使用" aria-label="Permalink to &quot;一个巧妙的数据结构设计的例子，bitmap的使用&quot;">​</a></h1><h2 id="需求" tabindex="-1">需求 <a class="header-anchor" href="#需求" aria-label="Permalink to &quot;需求&quot;">​</a></h2><h3 id="假设有这么一个需求" tabindex="-1">假设有这么一个需求 <a class="header-anchor" href="#假设有这么一个需求" aria-label="Permalink to &quot;假设有这么一个需求&quot;">​</a></h3><ul><li>需要多次插入数据</li><li><strong>能方便的导出每次插入的数据</strong></li><li>用一张数据表完成需求</li></ul><h3 id="具体需求阐述" tabindex="-1">具体需求阐述 <a class="header-anchor" href="#具体需求阐述" aria-label="Permalink to &quot;具体需求阐述&quot;">​</a></h3><p>第一次插入10W条数据，第二次插入4W条数据，第三次插入5W条数据，第4次插入1W条数据，可能后面还有N次，<strong>注意每次插入的数据量级，这个是为什么不用主子表实现的关键因素，用主子表会导致子表记录数的快速膨胀</strong>，另一个重要的假设是上面的数据如果取并集，一共大概11W，远小于计次的20W。<strong>N越大，并集越小，这个设计的好处越明显。</strong></p><p>假设插入数据的频率是一天一次，每次插入之后都会有其他程序按照主键来更新数据，比如爬虫。最终能方便的按次取数据。</p><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><h3 id="库表设计" tabindex="-1">库表设计 <a class="header-anchor" href="#库表设计" aria-label="Permalink to &quot;库表设计&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example_table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bitmap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    -- 其他数据列省略...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example_table (bitmap) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VALUES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0101</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0011</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0111</span></span></code></pre></div><h3 id="插入数据的方法" tabindex="-1">插入数据的方法 <a class="header-anchor" href="#插入数据的方法" aria-label="Permalink to &quot;插入数据的方法&quot;">​</a></h3><p>每次插入数据如果主键重复则执行更新操作，bitmap列是加上2的N-1次方，如果是新记录则直接是2的N-1次方</p><h3 id="取数据的方法" tabindex="-1">取数据的方法 <a class="header-anchor" href="#取数据的方法" aria-label="Permalink to &quot;取数据的方法&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 要导出第N次的数据，则直接查询bitmap列的第N-1位是否为1(表示第N次插入或者更新过这条数据)；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 可以使用以下查询，序号是从右往左且从0开始的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id, bitmap</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example_table</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bitmap &amp; (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> N) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>最核心的设计就是这个 <code>bitmap &amp; (1 &lt;&lt; N) != 0</code>,正常开发场景下极少用到位运算。</p>`,15)]))}const c=a(l,[["render",e]]);export{o as __pageData,c as default};
