import{o as n,c as s,f as a}from"./app.2c2b3b94.js";const p='{"title":"斐波那契数列","description":"斐波那契数列的几种实现","frontmatter":{"date":"2017-04-26","title":"斐波那契数列","tags":["算法"],"description":"斐波那契数列的几种实现"},"headers":[{"level":2,"title":"普通实现","slug":"普通实现"},{"level":2,"title":"尾调用优化 - call stack 持续复用， 复杂度O(n)","slug":"尾调用优化-call-stack-持续复用，-复杂度o-n"},{"level":2,"title":"动态规划 实际执行效率和尾调用一样，复杂度O(n)","slug":"动态规划-实际执行效率和尾调用一样，复杂度o-n"},{"level":2,"title":"通项公式就算了 记不住","slug":"通项公式就算了-记不住"}],"relativePath":"posts/al_fibonacci.md","lastUpdated":1630727480741}',t={},o=[a('<h1 id="斐波那契数列的js实现"><a class="header-anchor" href="#斐波那契数列的js实现" aria-hidden="true">#</a> 斐波那契数列的js实现</h1><h2 id="普通实现"><a class="header-anchor" href="#普通实现" aria-hidden="true">#</a> 普通实现</h2><p>复杂度O(2**n)</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fibo1</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">fibo1</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibo</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="尾调用优化-call-stack-持续复用，-复杂度o-n"><a class="header-anchor" href="#尾调用优化-call-stack-持续复用，-复杂度o-n" aria-hidden="true">#</a> 尾调用优化 - call stack 持续复用， 复杂度O(n)</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fibo2</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> current <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> next<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">fibo2</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> next<span class="token punctuation">,</span> current <span class="token operator">+</span> next<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="动态规划-实际执行效率和尾调用一样，复杂度o-n"><a class="header-anchor" href="#动态规划-实际执行效率和尾调用一样，复杂度o-n" aria-hidden="true">#</a> 动态规划 实际执行效率和尾调用一样，复杂度O(n)</h2><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">fibo3</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> n1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">===</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">||</span> n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">[</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>n2<span class="token punctuation">,</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> n2\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="通项公式就算了-记不住"><a class="header-anchor" href="#通项公式就算了-记不住" aria-hidden="true">#</a> 通项公式就算了 记不住</h2>',9)];t.render=function(a,p,t,e,c,l){return n(),s("div",null,o)};export{p as __pageData,t as default};
