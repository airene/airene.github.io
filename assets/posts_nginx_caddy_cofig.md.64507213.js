import{_ as a,o as s,c as n,X as o}from"./chunks/framework.245c3fa4.js";const h=JSON.parse('{"title":"nginx 和 caddy 反向代理的区别","description":"caddy简单的反向代理非常好实现，如果是稍微复杂点的，还真不知道caddy怎么写，查资料都不好查，官网翻了半天都没有，为了自动证书特性还是google到了，虽然知道底层用的是acme.sh的，还是不想额外单独自己装","frontmatter":{"date":"2023-03-26T00:00:00.000Z","title":"nginx 和 caddy 反向代理的区别","tags":["nginx","caddy"],"description":"caddy简单的反向代理非常好实现，如果是稍微复杂点的，还真不知道caddy怎么写，查资料都不好查，官网翻了半天都没有，为了自动证书特性还是google到了，虽然知道底层用的是acme.sh的，还是不想额外单独自己装"},"headers":[],"relativePath":"posts/nginx_caddy_cofig.md","filePath":"posts/nginx_caddy_cofig.md"}'),e={name:"posts/nginx_caddy_cofig.md"},t=o(`<h1 id="nginx-和-caddy-反向代理的区别" tabindex="-1">nginx 和 caddy 反向代理的区别 <a class="header-anchor" href="#nginx-和-caddy-反向代理的区别" aria-label="Permalink to &quot;nginx 和 caddy 反向代理的区别&quot;">​</a></h1><p>之前提到过<a href="https://www.ti.bi/posts/caddy_auto_tls.html" target="_blank" rel="noreferrer">https://www.ti.bi/posts/caddy_auto_tls.html</a> 这个<br> 这次就真的换了。</p><h2 id="期望目标" tabindex="-1">期望目标 <a class="header-anchor" href="#期望目标" aria-label="Permalink to &quot;期望目标&quot;">​</a></h2><p>后端接口服务url: <code>http://localhost:8008/getJson</code><br> 前端调用地址: 当前FE域名加<code>/api/getJson</code>能访问！<br><strong>注意后端是没有<code>/api/</code>这个路径的哦</strong></p><p>上配置:</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 注意8008最后有一个 &#39;/&#39; 有没有这个差异还是很大的</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">/api/ </span><span style="color:#A6ACCD;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;"> proxy_pass </span><span style="color:#A6ACCD;">http://localhost:8008/</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    }</span></span></code></pre></div><p>不想写有没有<code>/</code>什么差异的内容了，网上有的是，直接看caddy的，然后实现的效果是一样的就好理解了</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">handle_path</span><span style="color:#A6ACCD;"> /api/* {</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">reverse_proxy</span><span style="color:#A6ACCD;"> localhost:8008</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>重点其实是<code>handle_path</code>的使用<br> 直接写成 <code>reverse_proxy /api/* localhost:8008</code> 是不行的，直接写应该是后端带<code>/api/</code> 能支持，<strong>这一点未测试</strong></p>`,9),c=[t];function p(l,d,r,i,_,y){return s(),n("div",null,c)}const C=a(e,[["render",p]]);export{h as __pageData,C as default};
