import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.BmLMQRXF.js";const c=JSON.parse('{"title":"Caddy 成功配置插件 rate_limit 限流","description":"如果有一个网站访问最多的是爬虫，要怎么做，限流是一个方法","frontmatter":{"date":"2025-02-13T00:00:00.000Z","title":"Caddy 成功配置插件 rate_limit 限流","category":"caddy","tags":["caddy"],"description":"如果有一个网站访问最多的是爬虫，要怎么做，限流是一个方法"},"headers":[],"relativePath":"posts/caddy_rate_limits.md","filePath":"posts/caddy_rate_limits.md"}'),e={name:"posts/caddy_rate_limits.md"};function l(p,s,h,d,r,k){return n(),i("div",null,s[0]||(s[0]=[t(`<h1 id="caddy-成功配置插件-rate-limit-限流" tabindex="-1">Caddy 成功配置插件 rate_limit 限流 <a class="header-anchor" href="#caddy-成功配置插件-rate-limit-限流" aria-label="Permalink to &quot;Caddy 成功配置插件 rate_limit 限流&quot;">​</a></h1><h2 id="下载方式" tabindex="-1">下载方式 <a class="header-anchor" href="#下载方式" aria-label="Permalink to &quot;下载方式&quot;">​</a></h2><p>限流不是一个内置插件，官方只是开了一个口子，允许自行实现，官方页面定制下载，搜索关键字 <code>ratelimit</code>,找到 <a href="https://github.com/mholt/caddy-ratelimit" target="_blank" rel="noreferrer">https://github.com/mholt/caddy-ratelimit</a> 这个插件，下载。</p><h2 id="配置文件-caddyfile-的写法" tabindex="-1">配置文件 caddyfile 的写法 <a class="header-anchor" href="#配置文件-caddyfile-的写法" aria-label="Permalink to &quot;配置文件 caddyfile 的写法&quot;">​</a></h2><p>一开始使用配置文件，因为文档的问题，描述的感觉不是非常清楚，当然也可能是使用不当，下面发一下成功的配置<br><strong>需求： 所有伪静态页面限制固定的访问频率</strong></p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 每天最多访问100篇</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">domain {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    rate_limit {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        zone limit_zone1 {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            match {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                path_regexp \\.(html|htm|php)$</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            key {remote_host}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            events 100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            window 1d</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 插件返回的限流处理</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    handle_errors {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        @</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">429 {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        expression \`{http.error.status_code} == 429\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        respond @429 &quot;Too fast！&quot; 429</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        respond &quot;Unknown Error&quot; {http.error.status_code}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="另外同时支持-80-和-443-的配置的写法参考" tabindex="-1">另外同时支持 80 和 443 的配置的写法参考 <a class="header-anchor" href="#另外同时支持-80-和-443-的配置的写法参考" aria-label="Permalink to &quot;另外同时支持 80 和 443 的配置的写法参考&quot;">​</a></h2><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可能有更简洁的写法</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://domain, https://domain {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const y=a(e,[["render",l]]);export{c as __pageData,y as default};
