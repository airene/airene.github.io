import{_ as a,o as i,c as r,z as e,a as o,t as s,O as l}from"./chunks/framework.7d395e2a.js";const k=JSON.parse('{"title":"vue性能优化的9个技巧","description":"业务系统可能不太在乎性能，写框架就会要求高不少","frontmatter":{"date":"2020-02-20T00:00:00.000Z","title":"vue性能优化的9个技巧","tags":["vue"],"description":"业务系统可能不太在乎性能，写框架就会要求高不少"},"headers":[],"relativePath":"posts/vue_optimize.md","filePath":"posts/vue_optimize.md"}'),n={name:"posts/vue_optimize.md"},_={id:"frontmatter-title",tabindex:"-1"},c=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),p=l('<ul><li>无状态的函数式组件 核心就是vnode是普通的还是组件的(状态)</li><li>组件分离 子组件很耗时的话，还是vue的更新策略决定的(组件粒度)，分离之后相当于缓存了，如果是无状态计算属性也能干这个</li><li>局部变量 在用计算属性的时候参数是可以用当前可响应的属性或者变量解构进去使用，提升非常明显</li><li>v-if vs v-show 初始化 if快，高频更新 show更好</li><li>keepalive 没什么好说的，特定场景有奇效</li><li>Deferred features 不明觉厉，样例还是很明显的</li><li>Time slicing react好像就用到了这个，名词挺高级的，实际核心是requestAnimationFrame，总的时间变长，界面不卡</li><li>减少响应式引用，感觉和第二个有点像</li><li>虚拟滚动 可能大部分需要虚拟滚动的场景，有可能需求可以再提炼一下，总有别的方式可以做到，比如树滚动(按级加载)，表格滚动(数据需求提炼)，</li></ul><h2 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to &quot;资料&quot;">​</a></h2><p><a href="https://github.com/Akryum/vue-9-perf-secrets" target="_blank" rel="noreferrer">github</a><br><a href="https://slides.com/akryum/vueconfus-2019" target="_blank" rel="noreferrer">ppt</a></p>',3);function d(t,m,u,f,h,v){return i(),r("div",null,[e("h1",_,[o(s(t.$frontmatter.title)+" ",1),c]),p])}const T=a(n,[["render",d]]);export{k as __pageData,T as default};
