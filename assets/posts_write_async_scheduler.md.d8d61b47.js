import{o as n,c as s,f as a}from"./app.fcfe4b54.js";const t='{"title":"基于async和await的异步调度器","description":"实现一个限制并发的异步调度器","frontmatter":{"date":"2020-03-02","title":"基于async和await的异步调度器","tags":["手撕"],"description":"实现一个限制并发的异步调度器"},"relativePath":"posts/write_async_scheduler.md","lastUpdated":1631172271241}',p={},o=[a('<h1 id="基于async和await的异步调度器"><a class="header-anchor" href="#基于async和await的异步调度器" aria-hidden="true">#</a> 基于async和await的异步调度器</h1><ul><li>可以通过初始化设置并发数</li><li><strong>巧妙的地方就在resolve什么时候执行上</strong></li><li>当前对js执行机制要非常熟悉</li></ul><div class="language-js"><pre><code><span class="token keyword">class</span> <span class="token class-name">Scheduler</span> <span class="token punctuation">{</span>\n    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">maxNum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>maxNum <span class="token operator">=</span> maxNum\n        <span class="token keyword">this</span><span class="token punctuation">.</span>taskList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">async</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">await</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n                <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token comment">//重点就在用resolve来阻塞执行</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//遇到这个就交出控制权</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">--</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>taskList<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',3)];p.render=function(a,t,p,c,e,u){return n(),s("div",null,o)};export{t as __pageData,p as default};
